#!/bin/bash

set -e

cd "$(dirname "$0")"

GIT_BRANCH=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
GIT_COMMIT_ID=$(git rev-parse --short HEAD)
IMAGE_NAME="base-workspace-${GIT_BRANCH}"
CONTAINER_NAME="base-workspace-${GIT_BRANCH}"
CONTAINER_USERNAME="user"

VOLUME_PROJECTS_DIR="${PWD}/projects/"
VOLUME_SSH_DIR="${PWD}/temp/.ssh/"
VOLUME_VSCODESERVER_DIR="${PWD}/temp/.vscode-server/"

DOCKERHUB_PUSH_TAG_NAME="jench2103/docker-base-workspace"
DOCKERHUB_PUSH_ARCH="linux/amd64,linux/arm64"

usage_message() {
    cat <<EOF

    This script will help you manage the Docker Base Workspace.
    You can execute this script with the following options.

    pull            : pull the latest official image from DockerHub
    build           : build a new image on this machine
    build-registry  : build images with specified platforms and push to DockerHub
    start           : pull and enter the workspace
    stop            : stop and exit the workspace
    prune           : remove the docker image
    repull          : remove the existing image and pull the latest one to apply new changes
    rebuild         : remove the existing image and build a new one to apply new changes

EOF
}

build_image() {
    if [[ "$(docker images -q "${IMAGE_NAME}")" == "" ]]; then
        docker build -t "${IMAGE_NAME}" . ||
            { echo "error due to docker build image" && exit 1; }
    else
        echo "There exists image \`${IMAGE_NAME}\`."
        echo "Use \`run rebuild\` if you want to remove the existing image and build a new one."
    fi
}

build_image_dockerhub() {
    if [[ ${DOCKERHUB_PUSH_TAG_NAME} != "" && ${DOCKERHUB_PUSH_ARCH} != "" ]]; then
        if [ -z "$(git status --porcelain)" ]; then
            # Working directory clean
            DOCKERHUB_PUSH_TAG="-t ${DOCKERHUB_PUSH_TAG_NAME}:latest -t ${DOCKERHUB_PUSH_TAG_NAME}:${GIT_COMMIT_ID}"
        else
            # Uncommitted changes
            DOCKERHUB_PUSH_TAG="-t ${DOCKERHUB_PUSH_TAG_NAME}:latest"
        fi
        # shellcheck disable=SC2086
        docker buildx build --platform "${DOCKERHUB_PUSH_ARCH}" ${DOCKERHUB_PUSH_TAG} --push . ||
            { echo "error due to building image with docker buildx" && exit 1; }
    else
        echo "The information for building and pushing images to DockerHub is empty."
        echo "Please update the \`run\` script with proper values before using this subcommand."
    fi
}

pull_image() {
    if [[ "$(docker images -q "${IMAGE_NAME}")" == "" ]]; then
        docker pull jench2103/docker-base-workspace:latest
        docker tag jench2103/docker-base-workspace:latest "${IMAGE_NAME}"
    else
        echo "There exists image \`${IMAGE_NAME}\`."
        echo "Use \`run repull\` if you want to remove the existing image and pull the latest one."
    fi
}

start_environment() {
    if [[ "$(docker images -q "${IMAGE_NAME}")" == "" ]]; then
        pull_image
    fi

    [[ -d ${VOLUME_SSH_DIR} ]] || mkdir -p "${VOLUME_SSH_DIR}"
    [[ -d ${VOLUME_VSCODESERVER_DIR} ]] || mkdir -p "${VOLUME_VSCODESERVER_DIR}"
    [[ -d ${VOLUME_PROJECTS_DIR} ]] || mkdir -p "${VOLUME_PROJECTS_DIR}"

    if [[ "$(docker ps | grep "${CONTAINER_NAME}")" == "" ]]; then
        stop_docker_container
        docker run -d \
            -e USERID="$(id -u)" \
            -e GROUPID="$(id -g)" \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo "/${VOLUME_PROJECTS_DIR}" || echo "${VOLUME_PROJECTS_DIR}")":"/home/${CONTAINER_USERNAME}/projects/" \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo "/${VOLUME_SSH_DIR}" || echo "${VOLUME_SSH_DIR}")":"/home/${CONTAINER_USERNAME}/.ssh/" \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo "/${VOLUME_VSCODESERVER_DIR}" || echo "${VOLUME_VSCODESERVER_DIR}")":"/home/${CONTAINER_USERNAME}/.vscode-server/" \
            --hostname "$(echo "${CONTAINER_NAME}" | tr '[:lower:]' '[:upper:]')" \
            --name "${CONTAINER_NAME}" \
            "${IMAGE_NAME}" ||
            { echo "error due to docker run image" && exit 1; }
    fi

    case ${OSTYPE} in
    msys)
        winpty docker exec -it "${CONTAINER_NAME}" bash
        ;;
    *)
        docker exec -it "${CONTAINER_NAME}" bash
        ;;
    esac

    clear
}

stop_docker_container() {
    if [[ "$(docker ps -a | grep "${CONTAINER_NAME}")" != "" ]]; then
        docker container rm -f "${CONTAINER_NAME}"
    fi
}

remove_docker_image() {
    if [[ "$(docker images -q "${IMAGE_NAME}")" != "" ]]; then
        docker rmi "${IMAGE_NAME}"
    fi
}

export DOCKER_SCAN_SUGGEST=false

[[ $(
    docker ps >/dev/null 2>&1
    echo $?
) != 0 ]] && echo "error: please install and start Docker Engine first!!!" && exit 1

case $1 in
pull)
    pull_image
    ;;
build)
    build_image
    ;;
build-registry)
    build_image_dockerhub
    ;;
start)
    start_environment
    ;;
stop)
    stop_docker_container
    ;;
prune)
    stop_docker_container
    remove_docker_image
    ;;
repull)
    stop_docker_container
    remove_docker_image
    pull_image
    ;;
rebuild)
    stop_docker_container
    remove_docker_image
    build_image
    ;;
*)
    usage_message
    ;;
esac
